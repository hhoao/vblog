#file: noinspection YAMLSchemaValidation
name: Deploy

on:
  workflow_call:
    inputs:
      force-deploy:
        required: true
        type: string
      project-name:
        required: true
        type: string
    secrets:
      redis-server-host:
        required: true
      elastic-server-host:
        required: true
      mysql-server-host:
        required: true
      mysql-root-password:
        required: true
      jwt-secret:
        required: true
      elastic-password:
        required: true
      docker-username:
        required: true
      docker-password:
        required: true

jobs:
  check-update:
    name: Check if the project is updated
    runs-on: ubuntu-latest
    if: ${{ inputs.force-deploy != 'true' }}
    outputs:
      is_update: ${{ steps.step2.outputs.is_update }}
    steps:
      - id: step1
        name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - id: step2
        name: Check out project update
        run: |
          if [ -n "$(git diff HEAD^ -- ${{ inputs.project-name }})" ];
          then
            echo "is_update=true" >> $GITHUB_OUTPUT
          fi

  push-to-docker-registry:
    needs: check-update
    name: Build, test and push docker image to docker hub
    runs-on: ubuntu-latest
    if: ${{ needs.check-update.outputs.is_update == 'true' || inputs.force-deploy == 'true' }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Checkout gradle
        uses: gradle/wrapper-validation-action@v1

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Run build with Gradle wrapper
        env:
          MYSQL_SERVER_HOST: ${{ secrets.mysql-server-host }}
          ELASTIC_SERVER_HOST: ${{ secrets.elastic-server-host }}
          REDIS_SERVER_HOST: ${{ secrets.redis-server-host }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.mysql-root-password  }}
          JWT_SECRET: ${{ secrets.jwt-secret }}
          ELASTIC_PASSWORD: ${{ secrets.elastic-password }}
        run: |
          ./gradlew :${{ inputs.project-name }}:build;

      - name: Upload build reports
        uses: actions/upload-artifact@v3
        with:
          name: build-reports
          path: build/reports/

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.docker-username }}
          password: ${{ secrets.docker-password }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ secrets.docker-username }}/${{ inputs.project-name }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./${{ inputs.project-name }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
