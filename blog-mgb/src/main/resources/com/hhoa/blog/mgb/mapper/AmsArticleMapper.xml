<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hhoa.blog.mgb.mapper.AmsArticleMapper">
  <resultMap id="BaseResultMap" type="com.hhoa.blog.mgb.model.AmsArticle">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="author" jdbcType="VARCHAR" property="author" />
    <result column="digest" jdbcType="VARCHAR" property="digest" />
    <result column="type" jdbcType="TINYINT" property="type" />
    <result column="reading_amount" jdbcType="VARCHAR" property="readingAmount" />
    <result column="top" jdbcType="BIT" property="top" />
    <result column="level" jdbcType="TINYINT" property="level" />
    <result column="visible" jdbcType="BIT" property="visible" />
    <result column="cover" jdbcType="VARCHAR" property="cover" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.hhoa.blog.mgb.model.AmsArticle">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, title, author, digest, type, reading_amount, top, level, visible, cover
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.hhoa.blog.mgb.model.AmsArticleExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from ams_article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.hhoa.blog.mgb.model.AmsArticleExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ams_article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from ams_article
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from ams_article
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.hhoa.blog.mgb.model.AmsArticleExample">
    delete from ams_article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hhoa.blog.mgb.model.AmsArticle">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into ams_article (title, author, digest, 
      type, reading_amount, top, 
      level, visible, cover, 
      content)
    values (#{title,jdbcType=VARCHAR}, #{author,jdbcType=VARCHAR}, #{digest,jdbcType=VARCHAR}, 
      #{type,jdbcType=TINYINT}, #{readingAmount,jdbcType=VARCHAR}, #{top,jdbcType=BIT}, 
      #{level,jdbcType=TINYINT}, #{visible,jdbcType=BIT}, #{cover,jdbcType=VARCHAR}, 
      #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.hhoa.blog.mgb.model.AmsArticle">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into ams_article
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="title != null">
        title,
      </if>
      <if test="author != null">
        author,
      </if>
      <if test="digest != null">
        digest,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="readingAmount != null">
        reading_amount,
      </if>
      <if test="top != null">
        top,
      </if>
      <if test="level != null">
        level,
      </if>
      <if test="visible != null">
        visible,
      </if>
      <if test="cover != null">
        cover,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        #{author,jdbcType=VARCHAR},
      </if>
      <if test="digest != null">
        #{digest,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=TINYINT},
      </if>
      <if test="readingAmount != null">
        #{readingAmount,jdbcType=VARCHAR},
      </if>
      <if test="top != null">
        #{top,jdbcType=BIT},
      </if>
      <if test="level != null">
        #{level,jdbcType=TINYINT},
      </if>
      <if test="visible != null">
        #{visible,jdbcType=BIT},
      </if>
      <if test="cover != null">
        #{cover,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hhoa.blog.mgb.model.AmsArticleExample" resultType="java.lang.Long">
    select count(*) from ams_article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update ams_article
    <set>
      <if test="row.id != null">
        id = #{row.id,jdbcType=BIGINT},
      </if>
      <if test="row.title != null">
        title = #{row.title,jdbcType=VARCHAR},
      </if>
      <if test="row.author != null">
        author = #{row.author,jdbcType=VARCHAR},
      </if>
      <if test="row.digest != null">
        digest = #{row.digest,jdbcType=VARCHAR},
      </if>
      <if test="row.type != null">
        type = #{row.type,jdbcType=TINYINT},
      </if>
      <if test="row.readingAmount != null">
        reading_amount = #{row.readingAmount,jdbcType=VARCHAR},
      </if>
      <if test="row.top != null">
        top = #{row.top,jdbcType=BIT},
      </if>
      <if test="row.level != null">
        level = #{row.level,jdbcType=TINYINT},
      </if>
      <if test="row.visible != null">
        visible = #{row.visible,jdbcType=BIT},
      </if>
      <if test="row.cover != null">
        cover = #{row.cover,jdbcType=VARCHAR},
      </if>
      <if test="row.content != null">
        content = #{row.content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update ams_article
    set id = #{row.id,jdbcType=BIGINT},
      title = #{row.title,jdbcType=VARCHAR},
      author = #{row.author,jdbcType=VARCHAR},
      digest = #{row.digest,jdbcType=VARCHAR},
      type = #{row.type,jdbcType=TINYINT},
      reading_amount = #{row.readingAmount,jdbcType=VARCHAR},
      top = #{row.top,jdbcType=BIT},
      level = #{row.level,jdbcType=TINYINT},
      visible = #{row.visible,jdbcType=BIT},
      cover = #{row.cover,jdbcType=VARCHAR},
      content = #{row.content,jdbcType=LONGVARCHAR}
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update ams_article
    set id = #{row.id,jdbcType=BIGINT},
      title = #{row.title,jdbcType=VARCHAR},
      author = #{row.author,jdbcType=VARCHAR},
      digest = #{row.digest,jdbcType=VARCHAR},
      type = #{row.type,jdbcType=TINYINT},
      reading_amount = #{row.readingAmount,jdbcType=VARCHAR},
      top = #{row.top,jdbcType=BIT},
      level = #{row.level,jdbcType=TINYINT},
      visible = #{row.visible,jdbcType=BIT},
      cover = #{row.cover,jdbcType=VARCHAR}
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hhoa.blog.mgb.model.AmsArticle">
    update ams_article
    <set>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        author = #{author,jdbcType=VARCHAR},
      </if>
      <if test="digest != null">
        digest = #{digest,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=TINYINT},
      </if>
      <if test="readingAmount != null">
        reading_amount = #{readingAmount,jdbcType=VARCHAR},
      </if>
      <if test="top != null">
        top = #{top,jdbcType=BIT},
      </if>
      <if test="level != null">
        level = #{level,jdbcType=TINYINT},
      </if>
      <if test="visible != null">
        visible = #{visible,jdbcType=BIT},
      </if>
      <if test="cover != null">
        cover = #{cover,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.hhoa.blog.mgb.model.AmsArticle">
    update ams_article
    set title = #{title,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      digest = #{digest,jdbcType=VARCHAR},
      type = #{type,jdbcType=TINYINT},
      reading_amount = #{readingAmount,jdbcType=VARCHAR},
      top = #{top,jdbcType=BIT},
      level = #{level,jdbcType=TINYINT},
      visible = #{visible,jdbcType=BIT},
      cover = #{cover,jdbcType=VARCHAR},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hhoa.blog.mgb.model.AmsArticle">
    update ams_article
    set title = #{title,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      digest = #{digest,jdbcType=VARCHAR},
      type = #{type,jdbcType=TINYINT},
      reading_amount = #{readingAmount,jdbcType=VARCHAR},
      top = #{top,jdbcType=BIT},
      level = #{level,jdbcType=TINYINT},
      visible = #{visible,jdbcType=BIT},
      cover = #{cover,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>