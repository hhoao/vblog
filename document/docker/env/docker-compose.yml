version: "3.9"
services:
  nginx-setup:
    image: nginx:1.23.3-alpine
    volumes:
      - nginx-conf:/etc/nginx/conf.d
      - ./default.conf:/default.conf
      - ./update.sh:/update.sh
    command: >
      sh -c '
        cp /default.conf /etc/nginx/conf.d;
        cp /update.sh /etc/nginx/conf.d;
        if [ ! -d /etc/nginx/conf.d/default-locations ]
        then
            mkdir /etc/nginx/conf.d/default-locations;
        fi
        until curl -s http://nginx | grep -q "<"; do sleep 2; done;
        echo "DONE nginx-setup!"
      '
    networks:
      - network
    healthcheck:
      test: [ "CMD-SHELL", "[ -f /default.conf ]" ]
      interval: 1s
      timeout: 5s
      retries: 120

  nginx:
    depends_on:
      nginx-setup:
        condition: service_healthy
    image: nginx:1.23.3-alpine
    ports:
      - ${NGINX_PORT}:80
    volumes:
      - /projects/public/data/uploads:/projects/public/data/uploads
      - web-data:/usr/share/nginx/html/release
      - nginx-conf:/etc/nginx/conf.d
    command: >
      sh -c '
        /etc/nginx/conf.d/update.sh /etc/nginx/conf.d/default-locations 1 &
        nginx -g "daemon off;"
      '
    networks:
      - network

  mysql:
    image: mysql:${MYSQL_VERSION}
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "3406:3306"
    volumes:
      - /projects/mysql/data:/var/lib/mysql
      - mysql-config:/etc/mysql
      - mysql-logs:/var/log/mysql #日志文件挂载
    security_opt:
      - seccomp:unconfined
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10
    networks:
      - network

  redis:
    image: redis:${REDIS_VERSION}
    command: redis-server
    ports:
      - ${REDIS_PORT}:6379
    networks:
      - network
    volumes:
      - /projects/redis/data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 30

  es-setup:
    image: ${ES_IMAGE_NAME}:${ES_IMAGE_VERSION}
    volumes:
      - es-certs:/usr/share/elasticsearch/config/certs
    user: "0"
    environment:
      - SERVER_HOST=${SERVER_HOST}
    networks:
      - network
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f certs/ca.zip ]; then
            echo "Creating CA";
            bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
            unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f certs/certs.zip ]; then
            echo "Creating certs";
            echo -ne \
            "instances:\n"\
            "  - name: es01\n"\
            "    dns:\n"\
            "      - es01\n"\
            "      - localhost\n"\
            "    ip:\n"\
            "      - 172.17.0.1\n"\
            "      - 127.0.0.1\n"\
            "      - ${SERVER_HOST}\n"\
            > config/certs/instances.yml;
            bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
            unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        chmod -R 777 /tmp
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120
  es01:
    depends_on:
      es-setup:
        condition: service_healthy
    image: ${ES_IMAGE_NAME}:${ES_IMAGE_VERSION}
    volumes:
      - es-certs:/usr/share/elasticsearch/config/certs
      - /projects/es01/data:/usr/share/elasticsearch/data
      - es01-logs:/usr/share/elasticsearch/logs
    ports:
      - ${ES_PORT}:9200
    user: "0"
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ES_LOG_STYLE=${ES_LOG_STYLE}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    deploy:
      resources:
        limits:
          memory: 1G

    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: ${KIBANA_IMAGE_NAME}:${KIBANA_IMAGE_VERSION}
    volumes:
      - es-certs:/usr/share/kibana/config/certs
    ports:
      - ${KIBANA_PORT}:5601
    networks:
      - network
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
  filebeat:
    image: ${FILEBEAT_IMAGE_NAME}:${FILEBEAT_IMAGE_VERSION}
    user: "0"
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    networks:
      - network
    volumes:
      - type: volume
        source: es-certs
        target: /usr/share/filebeat/config/certs
      - type: bind
        source: /var/lib/docker/containers
        target: /var/lib/docker/containers
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
      - type: bind
        source: filebeat.yml
        target: /usr/share/filebeat/filebeat.yml
  logstash:
    image: ${LOGSTASH_IMAGE_NAME}:${LOGSTASH_IMAGE_VERSION}
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - MYSQL_HOST=mysql:3306
      - ES_HOST=https://es01:9200
    volumes:
      - logstash-pipeline:/usr/share/logstash/pipeline
      - es-certs:/data/elastic
    networks:
      - network

volumes:
  nginx-conf:
    driver: local
  logstash-pipeline:
    driver: local
  web-data:
    driver: local
  es-certs:
    driver: local
  es01-logs:
    driver: local
  mysql-config:
    driver: local
  mysql-logs:
    driver: local
networks:
  network:
    name: env-network
    attachable: true
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
          ip_range: 172.28.5.0/24
          gateway: 172.28.5.254
